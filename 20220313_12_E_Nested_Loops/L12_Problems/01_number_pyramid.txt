20220309 JavaScript - Nested Loops
01 - Number Pyramid - judge: https://judge.softuni.org/Contests/Compete/Index/2410#0


Напишете функция, която получава цяло число n и отпечатва пирамида от числа, като в примерите:


_____________ Test Data _______________


Input 1:
-------
([“7”])


Output 1:
--------
1
2 3
4 5 6 
7


---------------------------------------


Input 2:
-------
([“12”])


Output 2:
--------
1
2 3
4 5 6
7 8 9 10 
11 12


---------------------------------------


Input 3:
-------
([“15”])


Output 3:
--------
1
2 3
4 5 6
7 8 9 10
11 12 13 14 15


---------------------------------------


Насоки:
-------
    *) Направете два вложени for цикъла, с които да печатате пирамидата от числа, като външният цикъл ще определя,
       колко реда да се отпечатат, а вътрешният – колко числа се принтират на съответния ред:

for (let rows = 1; rows <= n; rows++ ) {
    for (let cols = 1; cols <= rows; cols++) {

    }
}


    *) В отделен брояч пазете, колко числа сте отпечатали до момента (и кое е текущото число).
       Направете променлива, която да съдържа текущия ред, който трябва да отпечатате.
       Когато стигнете n, излезте от двата вложени цикъла с break.
       За да излезем и от двата цикъла трябва да използваме оператора break и в двата.
       За целта ще направим булева променлива, която да проверява, дали сме излезнали от вътрешния.
       Отидете в началото на програмата и инициализирайте следните три променливи:

let current = 1;
let isBigger = false;
let printCurrentLine = "";


    *) Във вътрешния for цикъл направете проверка, дали променливата current е станала по-голяма от n.
       Ако е, променете стойността на булевата променлива и излезте от вътрешния цикъл:

for (let rows = 1; rows <= n; rows++ ) {
    for (let cols = 1; cols <= rows; cols++) {
        if (current > n) {
            isBigger = true;
            break;
        }
    }
}


    *) След проверката, добавете в променливата printCurrentLine стойността на current в желания формат,
       и увеличете с 1 променливата current.
       Ако сте излезнали от цикъла няма да се стигне до добавяне на число към printCurrentLine!

for (let rows = 1; rows <= n; rows++ ) {
    for (let cols = 1; cols <= rows; cols++) {
        if (current > n) {
            isBigger = true;
            break;
        }
        printCurrentLine += current + " ";
        current++;
    }
}


    *) В тялото на външния цикъл, отпечатайте стойността на printCurrentLine и направете проверка,
       дали трябва да излезем и от него. Програмата ви трябва да изглежда по следния начин:

for (let rows = 1; rows <= n; rows++ ) {
    for (let cols = 1; cols <= rows; cols++) {
        if (current > n) {
            isBigger = true;
            break;
        }
        printCurrentLine += current + " ";
        current++;
    }
    console.log(printCurrentLine);
    printCurrentLine = "";
    if (isBigger) {
        break;
    }
}
